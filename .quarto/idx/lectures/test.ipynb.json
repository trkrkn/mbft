{"title":"Lecture 01 - Introduction to Python","markdown":{"headingText":"Lecture 01 - Introduction to Python","containsRefs":false,"markdown":"\n\n\n## 1. Motivation \n\n### What is Python?\n\nPython is a high-level, interpreted programming language known for its simplicity and readability.\n\n**Key Features of Python**\n\n- **Easy to Learn:** Python's syntax is straightforward.\n- **Interpreted Language:** Python code is executed line by line, which makes debugging easier.\n- **Dynamically Typed:** You don't need to declare variable types explicitly; Python handles it automatically.\n- **Versatile:** Python is used in web development, data analysis, automation, and much more.\n- **Huge Ecosystem:** Python has a large standard library and third-party modules for a wide variety of applications.\n\n  \n\n### Why Python for Finance?\n\n- **Data Handling:** In finance, you often work with large datasetsâ€”Python's libraries like `pandas` and `NumPy` are designed to handle and analyze financial data efficiently.\n- **Automation:** Python can automate repetitive tasks like data retrieval, report generation, and portfolio analysis.\n- **Financial Modeling:** Python is a great tool for building complex models such as forecasting, risk management, and pricing.\n- **Integration with Data Science:** Python is the most popular language for data science, offering extensive support for statistical analysis, machine learning, and data visualization.\n\n## 2. Setting up the environment\n\n### 2.1 Installing a Python environment\n\n#### Python\n- Download Python from the [official website](https://www.python.org/downloads/).\n- Installation includes the Python interpreter and Integrated Development Environment (IDLE) for coding.\n \n \n\n#### Installing Anaconda\n- Anaconda is a suite of useful tools and packages for Python development.\n- Download Anaconda from the [official website](https://www.anaconda.com/download)\n- Once it is installed, confirm the following environments and packages are available:\n    - [Spyder](https://www.spyder-ide.org/)\n    - [Jupyter Notebook](https://jupyter.org/)\n\n### 2.2 Running Python Code\n\nThere are multiple ways to run Python.\n\nConsider the following code line which instructs to simply print out \"Hello World!\"\n\n```python\n    print (\"Hello World!\")\n```\n\n#### Python Shell\n\n- Use the Python IDLE (from terminal of from any IDE setting like Spyder)\n- Type the code and press `Enter`\n- Check the output\n\n#### Python Script\n\n- Open an empty file (Spyder, [Sublime Text Editor](https://www.sublimetext.com), etc.)\n- Write the code\n- Save file as `helloworld.py`\n- Run the script\n    - From the terminal, run the script by typing\n    ```bash\n        python helloworld.py\n    ```\n    - From the IDE (like Spyder), launch the run\n- Check the output\n\n#### Notebook (*This is a Notebook*)\n\nPlatforms like [Jupyter Notebooks](https://jupyter.org/) are widely used in data science for documenting and running code interactively.\n- Open Jupyter Notebook by typing in the terminal\n```bash\n    Jupyter Notebook\n```\n- Creat a new notebook with a Python environment\n- Write the code in the first cell\n- Run the cell\n- Check the output (see below)\n\n## 3. Overview of the Python environment\n\n### 3.1 Syntax\n\n#### 3.1.1 Python as a calculator\n\n**Comments:** Use comments (`#`) to explain code, particularly useful for documenting underlying logic.\n\n#### 3.1.2 Variables and Data Types\n\n- **Variables**: Store data for calculations. \n\nThe operation `=` assigns a value to a variable.\n\n- **Data types**: Variables can be of different types.\n\n    - Strings (`str`): Text\n    - Integers (`int`): Integer value\n    - Floats (`float`): Real value\n    - Booleans (`bool`): True or False\n\nBecause Python is dynamically typed, there is no need to explicitly mention the type of the variable. Yet, in some cases, it may be important to cast variables from one type to another. \n\n*More on this in the next lecture.*\n\n### 3.2 Control structures\n\n**Control structures** allow to condition the sequence of action of a code on the particular value a variable exhibits at the time of execution.\n\n**Note:** `tabs` are organizational pillars of the Python code structure\n\n#### 3.2.1 Conditional statements\n\n**Conditional statements** consider the specific value of a variable at the time of execution and determine the outcome based on a logical operation.\n\n**Structure**\n\n```bash\n    If CONDITON HOLDS:\n        OUTCOME 1\n    Elif OTHER CONDITION HOLDS:\n        OUTCOME 2\n    Else:\n        OUTCOME 3\n```\n**Note:** check the `tabs`\n\n#### 3.2.2 Loops \n\n**Loops** repeat a sequence of actions until a condition is satisfied. There are two types of loops: \n\n- `while`\n- `for`\n\n##### `While`\n\n**Structure**\n```bash\n    While CONDITION HOLDS:\n        ACTION(s)\n```\n\n##### `For`\n\n**Structure**\n```bash\n    For CONDITION HOLDS | Increment action:\n        ACTION(s)\n```\n\n### 3.3 Functions \n\nA **function** is a reusable block of code that is saved up and can be called at multiple places in the main script.\n\n**Structure**\n```bash\n    def my_function (parameters):\n        ACTION(s)\n        return VALUE\n```\n\n### 3.4 Data structures\n\n#### 3.4.1 Lists\n\n**Lists** allow to store and treat mutliple data points into one variable\n\n#### 3.4.2 Dictionaries\n\n**Dictionnaries** allow store and treat multiple pairs of data point associating keys and values.\n\n### 3.5 Libraries \n\n**Libraries** are pre-built packages of functions for tasks like data analysis and visualization.\n  \n\n##### Key Libraries for Finance\n\n  - **`NumPy`**: For numerical computations \n          matrix operations in portfolio analysis\n  - **`pandas`**: Used for data manipulation \n          handling financial datasets\n  - **`matplotlib`**: For data visualization \n          plotting stock prices\n\n##### Documentation\n\nLibraries come with **documentation**. \n\nOn Notebooks, they can be directly accessed from the cell pressing `maj` + `tab` after the function.\n\n###### Example of documentation `numpy.sqrt()`\n\n```bash\n    Call signature:  numpy.sqrt(*args, **kwargs)\nType:            ufunc\nString form:     <ufunc 'sqrt'>\nFile:            ~/opt/anaconda3/lib/python3.9/site-packages/numpy/__init__.py\nDocstring:      \nsqrt(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj])\n\nReturn the non-negative square-root of an array, element-wise.\n\nParameters\n----------\nx : array_like\n    The values whose square-roots are required.\nout : ndarray, None, or tuple of ndarray and None, optional\n    A location into which the result is stored. If provided, it must have\n    a shape that the inputs broadcast to. If not provided or None,\n    a freshly-allocated array is returned. A tuple (possible only as a\n    keyword argument) must have length equal to the number of outputs.\nwhere : array_like, optional\n    This condition is broadcast over the input. At locations where the\n    condition is True, the `out` array will be set to the ufunc result.\n    Elsewhere, the `out` array will retain its original value.\n    Note that if an uninitialized `out` array is created via the default\n    ``out=None``, locations within it where the condition is False will\n    remain uninitialized.\n**kwargs\n    For other keyword-only arguments, see the\n    :ref:`ufunc docs <ufuncs.kwargs>`.\n\nReturns\n-------\ny : ndarray\n    An array of the same shape as `x`, containing the positive\n    square-root of each element in `x`.  If any element in `x` is\n    complex, a complex array is returned (and the square-roots of\n    negative reals are calculated).  If all of the elements in `x`\n    are real, so is `y`, with negative elements returning ``nan``.\n    If `out` was provided, `y` is a reference to it.\n    This is a scalar if `x` is a scalar.\n\nSee Also\n--------\nlib.scimath.sqrt\n    A version which returns complex numbers when given negative reals.\n\nNotes\n-----\n*sqrt* has--consistent with common convention--as its branch cut the\nreal \"interval\" [`-inf`, 0), and is continuous from above on it.\nA branch cut is a curve in the complex plane across which a given\ncomplex function fails to be continuous.\n\nExamples\n--------\n>>> np.sqrt([1,4,9])\narray([ 1.,  2.,  3.])\n\n>>> np.sqrt([4, -1, -3+4J])\narray([ 2.+0.j,  0.+1.j,  1.+2.j])\n\n>>> np.sqrt([4, -1, np.inf])\narray([ 2., nan, inf])\nClass docstring:\nFunctions that operate element by element on whole arrays.\n\nTo see the documentation for a specific ufunc, use `info`.  For\nexample, ``np.info(np.sin)``.  Because ufuncs are written in C\n(for speed) and linked into Python with NumPy's ufunc facility,\nPython's help() function finds this page whenever help() is called\non a ufunc.\n\nA detailed explanation of ufuncs can be found in the docs for :ref:`ufuncs`.\n\n**Calling ufuncs:** ``op(*x[, out], where=True, **kwargs)``\n\nApply `op` to the arguments `*x` elementwise, broadcasting the arguments.\n\nThe broadcasting rules are:\n\n* Dimensions of length 1 may be prepended to either array.\n* Arrays may be repeated along dimensions of length 1.\n\nParameters\n----------\n*x : array_like\n    Input arrays.\nout : ndarray, None, or tuple of ndarray and None, optional\n    Alternate array object(s) in which to put the result; if provided, it\n    must have a shape that the inputs broadcast to. A tuple of arrays\n    (possible only as a keyword argument) must have length equal to the\n    number of outputs; use None for uninitialized outputs to be\n    allocated by the ufunc.\nwhere : array_like, optional\n    This condition is broadcast over the input. At locations where the\n    condition is True, the `out` array will be set to the ufunc result.\n    Elsewhere, the `out` array will retain its original value.\n    Note that if an uninitialized `out` array is created via the default\n    ``out=None``, locations within it where the condition is False will\n    remain uninitialized.\n**kwargs\n    For other keyword-only arguments, see the :ref:`ufunc docs <ufuncs.kwargs>`.\n\nReturns\n-------\nr : ndarray or tuple of ndarray\n    `r` will have the shape that the arrays in `x` broadcast to; if `out` is\n    provided, it will be returned. If not, `r` will be allocated and\n    may contain uninitialized values. If the function has more than one\n    output, then the result will be a tuple of arrays.\n```\n\n# 4. Organisation\n\nThe rest of the class is organized as follows:\n\n| Lecture   | Topic  |  Content\n|---|---| ---|\n| **Lecture 02** | Data types and structures | `int`, `float`, `list`|\n| **Lecture 03** | Control structures | `if`, `for` |\n| **Lecture 04** | Functions | `def` |\n| **Lecture 05** | OO Programming | `class` |\n| **Lecture 06** | Libraries | \n| **Lecture 07** | Numerical computing | `numpy`|\n| **Lecture 08** | Data manipulation | `pandas` |\n| **Lecture 09** | Input & output | `read`, `write` |\n| **Lecture 10** | Data visualization | `matplotlib`|\n| **Lecture 11** | Time series | |\n| **Lecture 12** | Network analysis | `networkx`|\n| **Lecture 13&14** | Machine learning | `scikit-learn`|\n\n\n","srcMarkdownNoYaml":""},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":false,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"jupyter"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../styles.css"],"toc":true,"output-file":"test.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.5.57","bibliography":["../refs.bib"],"theme":"cosmo","toc-location":"left"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}